version: '3.9'

x-airflow-common: &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: weniai/airflow:latest
  # build: .
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    #_PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- mlflow datetime pandas sklearn transformers torch simplet5}
    CONNECTION_CHECK_MAX_COUNT: "0"
    AIRFLOW_UID: '1000'
    _AIRFLOW_DB_UPGRADE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 6000
    AIRFLOW__CORE__EXECUTE_TASKS_NEW_PYTHON_INTERPRETER: 'true'
    #AIRFLOW__CORE__HIDE_SENSITIVE_VAR_CONN_FIELDS: 'false'
  volumes:
    - ./dags/:/opt/airflow/dags
    - ./plugins/:/opt/airflow/plugins
  user: "1000:0"
  cap_drop:
    - ALL
  networks:
    - airflow-net
  deploy:
    mode: replicated
    replicas: 1

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "airflow", "-p", "5432", "-h", "127.0.0.1", "--dbname", "airflow"]
#      test: ["CMD", "pg_isready", "-U", "airflow"]
#      interval: 20s
#      retries: 5
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - airflow-net

  traefik:
    image: traefik:v2.8
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    #cap_drop:
    #  - ALL
    #cap_add:
    #  - NET_BIND_SERVICE
    #user: "1000:1000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      traefik-net:
    healthcheck:
      test: ["CMD", "/entrypoint.sh", "healthcheck", "--ping"]
    command:
      - "--providers.docker"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-net"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"
      - "--accessLog"
      - "--api=true"
      - "--ping=true"
      - "--metrics"
      - "--metrics.prometheus=true"
      - '--metrics.prometheus.addEntryPointsLabels=true'
      - '--metrics.prometheus.addServicesLabels=true'
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@localdomain.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--log.filePath=/dev/stdout"
#      - "--api.insecure=true"
#      - "--api.dashboard=true"
#      - "--api.debug=true"
#      - "--log.level=DEBUG"
      - "--certificatesresolvers.letsencrypt.acme.httpChallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpChallenge.entrypoint=http"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`localhost`) && (PathPrefix(`/admin/traefik/api`) || PathPrefix(`/admin/traefik/dashboard`) || PathPrefix(`/admin/traefik/debug`)) || HeadersRegexp(`Referer`, `.*://[^\/]*/admin/traefik.*`)"
        - "traefik.http.routers.api.service=api@internal"
        - "traefik.http.routers.api.entrypoints=https"
        - "traefik.http.routers.api.tls.certresolver=letsencrypt"
        - "traefik.http.routers.api.middlewares=api-auth,api-strip-prefix"
        # Dummy service for Swarm port detection. The port can be any valid integer value.
        - "traefik.http.services.api.loadbalancer.server.port=8080"
        # echo $(htpasswd -nb "traefik" "reUSzLLWkkQvac77CJu24rNzqJPfPZnM" )
        - "traefik.http.middlewares.api-auth.basicauth.users=traefik:$$apr1$$phuV142g$$8a4Af0TWCCl8YqsVo/rRE/"
        - "traefik.http.middlewares.api-strip-prefix.stripprefix.prefixes=/admin/traefik"

        - "traefik.http.routers.api-http.rule=Host(`localhost`) && PathPrefix(`/admin/traefik`)"
        - "traefik.http.routers.api-http.service=api@internal"
        - "traefik.http.routers.api-http.entrypoints=http"
        - "traefik.http.routers.api-http.middlewares=https_redirect"

        - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
      replicas: 1
      update_config:
        delay: 10s
        failure_action: rollback
        parallelism: 1
      rollback_config:
        parallelism: 0
        order: stop-first
      placement:
        constraints: [node.role==manager]

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 40s
      timeout: 10s
      retries: 8
    networks:
      - traefik-net
      - airflow-net
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.airflow.loadbalancer.server.port=8080"
        - "traefik.http.routers.airflow-secured.rule=Host(`localhost`)"
        - "traefik.http.routers.airflow-secured.entrypoints=https"
        - "traefik.http.routers.airflow-secured.tls.certresolver=letsencrypt"

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 40s
      timeout: 10s
      retries: 8

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 40s
      timeout: 10s
      retries: 8

  airflow-init:
    <<: *airflow-common
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        #if (( airflow_version_comparable < min_airflow_version_comparable )); then
        #  echo
        #  echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
        #  echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
        #  echo
        #  exit 1
        #fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        #if (( mem_available < 4000 )) ; then
        #  echo
        #  echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
        #  echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
        #  echo
        #  warning_resources="true"
        #fi
        #if (( cpus_available < 2 )); then
        #  echo
        #  echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
        #  echo "At least 2 CPUs recommended. You have $${cpus_available}"
        #  echo
        #  warning_resources="true"
        #fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -Rv "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    user: "0:0"
    volumes:
      - ./dags:/sources/dags
      - ./plugins:/sources/plugins

    #airflow-cli:
    #  <<: *airflow-common
    #  #profiles:
    #  #  - debug
    #  # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    #  command:
    #    - bash
    #    - -c
    #    - airflow

volumes:
  postgres-db-volume:

networks:
  traefik-net:
    name: traefik-net
    driver: overlay
    attachable: true
  airflow-net:
    name: airflow-net
    driver: overlay
    attachable: true

